{
	"info": {
		"_postman_id": "4cd6536c-7900-4431-a73e-28ae0bfb2eef",
		"name": "Login/Logout",
		"description": "## This folder contains the testing scripts for the login functionality of the admins/viewers\n\nIntelliq provides the capability of registring users (i.e. admins and viewers). To get augmented rights and functionalities while using the web application or the cli, the user must be registered in the database. To allow access to the registered user enhanced rights through the front-end and the cli, the login functionality is implemented and tested in this folder.\n\n### Login\n\n#### POST /login\n\nIt supports the http POST method for sending data to the server. A JSON object is forwarded whose body consists of two key-value pairs, one for the username and one for the password. If the user is registered in the database or the user is already logged in the request returns as successful, it fails otherwise.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16293360"
	},
	"item": [
		{
			"name": "create user before testing",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-OBSERVATORY-AUTH",
						"value": "e00f8e21a864de304a6c",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}admin/usermod/:username/:password",
					"host": [
						"{{baseUrl}}admin"
					],
					"path": [
						"usermod",
						":username",
						":password"
					],
					"variable": [
						{
							"key": "username",
							"value": "John"
						},
						{
							"key": "password",
							"value": "G00dPass!"
						}
					]
				},
				"description": "### Create User for Testing\n\nThis request is not actually a test for the user creation API capabilities, but it is important to run the collection without further editing the database by hand. Upon successful user creation 200 OK response is returned."
			},
			"response": []
		},
		{
			"name": "/login correct",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var token;\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    token=jsonData.token;\r",
							"    console.log(token)\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.have.jsonBody()\r",
							"});\r",
							"pm.collectionVariables.set(\"user_token\",token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "{{user}}",
							"type": "default"
						},
						{
							"key": "password",
							"value": "{{pass}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}login",
					"host": [
						"{{baseUrl}}login"
					]
				},
				"description": "### User login\n\nIn this POST request a user logs in and sends his/her data with a JSON object. Upon receiving the request and the payload, the response is 200 OK along with the user's user_token, since we have assured to have created the user on a previous request."
			},
			"response": []
		},
		{
			"name": "/login already logged in",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Second login returns the same token\", function () {\r",
							"        var token=pm.collectionVariables.get(\"user_token\")\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.expect(jsonData.token).to.eql(token);\r",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "{{user}}",
							"type": "default"
						},
						{
							"key": "password",
							"value": "{{pass}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}login",
					"host": [
						"{{baseUrl}}login"
					]
				},
				"description": "### Logged in User tries to login again\n\nA user that is already logged in tries to login again. The request does **not** fail and the response contains the the same user_token that the user has already received in his/her previous login request."
			},
			"response": []
		},
		{
			"name": "/login invalid",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Login with invalid credentials is prevented\",function(){\r",
							"    pm.response.to.have.status(401)\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.detail).to.eql(\"Invalid Credentials\");\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "{{user2}}",
							"type": "default"
						},
						{
							"key": "password",
							"value": "{{pass}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				},
				"description": "### A non-existent user tries to login\n\nCredentials of a user that does not exist are sent via a POST request to the database. Since the user is not found in the database, a 401 response is returned, along with a JSON object with the message \"Invalid Credentials\"."
			},
			"response": []
		},
		{
			"name": "/logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful logout\", function () {\r",
							"    pm.expect(pm.response.code).to.be(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-OBSERVATORY-AUTH",
						"value": "{{user_token}}",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/logout",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"logout"
					]
				},
				"description": "### An already logged in user logs out\n\nA user that is already logged in sends a POST request to log out. The backend recognizes that the user is already logged in since the X-OBSERVATORY-AUTH header contains his/her user_token and proceeds to log him/her out, returning either of 200, 201 or 202 response.\n\nEndFragment"
			},
			"response": []
		},
		{
			"name": "/logout invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Invalid logout is stopped.\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-OBSERVATORY-AUTH",
						"value": "{{user_token}}",
						"type": "default"
					},
					{
						"key": "X-OBSERVATORY-AUTH",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{baseUrl}}/logout",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"logout"
					]
				},
				"description": "### Invalid Logout\n\nAn invalid logout POST request occurs when an already logged out user or non-existent user tries to log out. The program processes both events in the same manner by returning a 401 response."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "user",
			"value": "John"
		},
		{
			"key": "pass",
			"value": "G00dPass!"
		},
		{
			"key": "user2",
			"value": "Johnny"
		},
		{
			"key": "i",
			"value": "5",
			"type": "string"
		},
		{
			"key": "user_token",
			"value": null,
			"type": "string"
		},
		{
			"key": "usernames",
			"value": [],
			"disabled": true
		}
	]
}