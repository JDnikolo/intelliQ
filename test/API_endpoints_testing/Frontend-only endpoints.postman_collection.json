{
	"info": {
		"_postman_id": "22f8d513-9f78-4598-9683-5a76b9769caa",
		"name": "Frontend-only endpoints",
		"description": "## This folder contains Testing scripts for trivial endpoints created for the Front-end\n\nThe intelliq API has implemented some endpoints only for the front-end functionalities. These trivial endpoints have been tested for vulnerabilities and expected behaviour.\n\n### Fetch questionnaires from server\n\n#### GET /getQuestionnaires\n\nIt supports the GET method and fetches the available questionnaires to the front-end user, if the user is authorized to see them.\n\n## Fetch sessions\n\n#### GET /getSessions\n\nIt supports http GET method to fetch all answering sessions logged into the database and in turn showcase them to the front-end user, if authorized.\n\n## Fetch questions\n\n#### GET /getQuestions\n\nIt supports http GET method to fetch all questions available for a questionnaire from the database and showcase them to the front-end user, if authorized.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16293360"
	},
	"item": [
		{
			"name": "/getQuestionnaires",
			"item": [
				{
					"name": "Get all questionnaires from server",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:9103/getQuestionnaires",
							"host": [
								"localhost"
							],
							"port": "9103",
							"path": [
								"getQuestionnaires"
							]
						},
						"description": "### Show all available questionnaires in browser\n\nThis testing script is part of the frontend testing. Given that an authorized user (admin) sends a GET request to show all questionnaires, the application returns the entries in the graphical environment of the browser.\n\nWhen the request is finished a 200 OK response is returned."
					},
					"response": []
				},
				{
					"name": "getQuestionnaires-No auth token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.equal(\"\\\"\\\"\\n\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:9103/getQuestionnaires",
							"host": [
								"localhost"
							],
							"port": "9103",
							"path": [
								"getQuestionnaires"
							]
						},
						"description": "StartFragment\n\n### Show all available questionnaires in browser failure (no authorization)\n\nA user tries to view the available questionnaires in the browser but the request fails to bring back data because the user lacks authorization.\n\nA 401 status response is returned.\n\nEndFragment"
					},
					"response": []
				}
			],
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "value",
						"value": "e00f8e21a864de304a6c",
						"type": "string"
					},
					{
						"key": "key",
						"value": "X-OBSERVATORY-AUTH",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "/getSessions",
			"item": [
				{
					"name": "Get all answer sessions of questionnaire",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:9103/getSessions/:questionnaireID",
							"host": [
								"localhost"
							],
							"port": "9103",
							"path": [
								"getSessions",
								":questionnaireID"
							],
							"variable": [
								{
									"key": "questionnaireID",
									"value": "QQ11"
								}
							]
						},
						"description": "### Show all sessions of a single questionnaire\n\nThis is an endpoint implemented for the needs of the front-end application. An authorized person can GET all the sessions of answers from the database, for a single questionnaire."
					},
					"response": []
				},
				{
					"name": "Get all answer sessions - questionnaire or answers don't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.equal(\"[]\\n\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:9103/getSessions/:questionnaireID",
							"host": [
								"localhost"
							],
							"port": "9103",
							"path": [
								"getSessions",
								":questionnaireID"
							],
							"variable": [
								{
									"key": "questionnaireID",
									"value": "QQ11"
								}
							]
						},
						"description": "### Try to show all sessions of a single questionnaire\n\nThis is an endpoint implemented for the needs of the front-end application. An authorized person can GET all the sessions of answers from the database, for a single questionnaire, but the questionnaire does not exist, or it is not answered at all (so there do not exist sessions)."
					},
					"response": []
				}
			]
		},
		{
			"name": "/getQuestions",
			"item": [
				{
					"name": "Get all question answers of questionnaire",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:9103/getQuestions/:questionnaireID",
							"host": [
								"localhost"
							],
							"port": "9103",
							"path": [
								"getQuestions",
								":questionnaireID"
							],
							"variable": [
								{
									"key": "questionnaireID",
									"value": "QQ111"
								}
							]
						},
						"description": "### Show all answers of a single questionnaire\n\nThis is an endpoint implemented for the needs of the front-end application. An authorized person can GET all the answers given to a certain quesitonnaire from the database."
					},
					"response": []
				},
				{
					"name": "Get all question answers-questionnaire or answers don't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.equal(\"[]\\n\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:9103/getQuestions/:questionnaireID",
							"host": [
								"localhost"
							],
							"port": "9103",
							"path": [
								"getQuestions",
								":questionnaireID"
							],
							"variable": [
								{
									"key": "questionnaireID",
									"value": "QQ11"
								}
							]
						},
						"description": "### Try to show all the answers of a single questionnaire, which does not exist or is not answered\n\nThis is an endpoint implemented for the needs of the front-end application. An authorized person tries to GET all the answers given to a certain quesitonnaire. The request fails because the questionnaire does not exist or has never been answered."
					},
					"response": []
				}
			]
		}
	]
}